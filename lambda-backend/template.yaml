AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  lambda-backend

  Sample SAM Template for lambda-backend

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Handler: app.lambda_handler
    Runtime: python3.10
    MemorySize: 1024
    Timeout: 30

    Environment:
      Variables:
        S3_STORAGE: !Ref S3Storage
        DYNAMODB_IMAGE_TABLE: !Ref DynamodbImageTable

    Tracing: Active
    # You can add LoggingConfig parameters such as the Logformat, Log Group, and SystemLogLevel or ApplicationLogLevel. Learn more here https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html#sam-function-loggingconfig.
    LoggingConfig:
      LogFormat: JSON
  Api:
    TracingEnabled: true

Parameters:
  S3Storage:
    Type: String
    Default: pictocontent-image
  
  DynamodbImageTable:
    Type: String
    Default: pictocontent-image-table

Resources:
  RestApiBackend:
    Type: AWS::Serverless::Api
    Properties:
      StageName: uat

#Add Create Presigned URL Role and Function
  CreatePresignedUrlRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: s3-presigned-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:ListBucket
                Resource: 
                  - !Sub "arn:aws:s3:::${S3Storage}"
                  - !Sub "arn:aws:s3:::${S3Storage}/*"
        - PolicyName: cloudwatch-grouplogs-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
        - PolicyName: cloudwatch-putlogs-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*"

  CreatePresignedUrlFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: functions/create_presigned_url/
      Description: 'Function to create presigned url, send url to frontend to make front able to upload a file'
      Role: !GetAtt CreatePresignedUrlRole.Arn
      Events:
        CreatePresignedUrlApi:
          Type: Api
          Properties:
            Path: /v1/api/create-upload-token
            Method: post
            RestApiId:
              Ref: RestApiBackend



#Add OpenAI calling url Role and Function  
  CallOpenAIFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: s3-read-bucket
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:ListBucket
                Resource: 
                  - !Sub "arn:aws:s3:::${S3Storage}"
                  - !Sub "arn:aws:s3:::${S3Storage}/*"
        - PolicyName: dynamodb-put-update-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamodbImageTable}"
        - PolicyName: secretmanager-getvalue-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:OPENAI_API_KEY-Qx5JxY"
        - PolicyName: cloudwatch-grouplogs-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
        - PolicyName: cloudwatch-putlogs-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*"
  
  CallOpenAIFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: functions/call_open_ai/
      Description: 'Function to call open ai api'
      Role: !GetAtt CallOpenAIFunctionRole.Arn
      Events:
        CallOpenAIApi:
          Type: Api
          Properties:
            Path: /v1/api/upload-image
            Method: post
            RestApiId:
              Ref: RestApiBackend

#Get Table Image Data
  GetTableImageResultRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: dynamodb-query-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamodbImageTable}"
        - PolicyName: s3-presigned-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:ListBucket
                Resource: 
                  - !Sub "arn:aws:s3:::${S3Storage}"
                  - !Sub "arn:aws:s3:::${S3Storage}/*"
        - PolicyName: cloudwatch-grouplogs-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
        - PolicyName: cloudwatch-putlogs-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*"  
    
  GetTableImageResult:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: functions/get_table_result/
      Description: 'Function to call open ai api'
      Role: !GetAtt GetTableImageResultRole.Arn
      Events:
        GetTableImageResultApi:
          Type: Api
          Properties:
            Path: /v1/api/get-result
            Method: post
            RestApiId:
              Ref: RestApiBackend
#Dynamo DB Image Table Initialization
  ImageDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref DynamodbImageTable
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: filename
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
        - AttributeName: filename
          KeyType: RANGE  # Specify the sort key
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  ImageS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref S3Storage

#Application Resource Group 
  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Sub: ApplicationInsights-SAM-${AWS::StackName}
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0
  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName:
        Ref: ApplicationResourceGroup
      AutoConfigurationEnabled: 'true'

